{"version":3,"sources":["atoms/Button.tsx","Letters.ts","molecules/Card.tsx","store/actions/addCard.ts","store/actions/removeCard.ts","store/actions/setTimerCard.ts","store/actions/setScore.ts","store/actions/startGame.ts","store/actions/stopGame.ts","App.tsx","cards.tsx","store/initialState.ts","store/store.ts","store/reducer/reducer.ts","index.tsx","atoms/Button.module.sass"],"names":["Button","props","className","styles","button","onClick","disabled","children","letters","Card","id","ADD_CARD","REMOVE_CARD","SET_TIMER_CARD","SET_SCORE","START_GAME","STOP_GAME","App","store","useState","isStarted","setStarted","timer","setTimer","getState","score","setscore","useEffect","alert","restart","setTimeout","start","dispatch","type","pause","newScore","num","setScore","openCard","content","card","openedCards","addCard","document","querySelector","classList","add","length","timerId","closeAllCards","timerFirstOpenCard","setTimerCard","clearTimeout","i","closeCard","remove","removeCard","timeClose","querySelectorAll","forEach","elem","setCards","cards","newCards","slice","sort","Math","random","shuffleCards","handlerClickCard","el","index","key","push","generateCard","event","currentTarget","contains","innerHTML","Date","getMinutes","getSeconds","initialState","deletedCards","createStore","state","action","console","log","filter","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ba3af7ad.chunk.js","sourcesContent":["import styles from './Button.module.sass';\r\nexport default function Button(props: any) {\r\n  return (\r\n    <button\r\n      className={styles.button}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >{props.children}</button>\r\n  );\r\n}","const letters = ['A','B','C','D','E','F','G','H','I','J','K','M','N','L','O','P','Q','R'];\r\nexport default letters;","export default function Card(props: any) {\r\n\r\n  return (\r\n    <div id={props.id} className=\"card\" onClick={props.onClick}>\r\n      <span>{props.children}</span>\r\n    </div>\r\n  );\r\n}","import InterfaceCard from \"../../interfaces/interfaceCard\";\r\n\r\nexport const ADD_CARD = 'ADD_CARD';\r\nexport function addCard({id, content}: InterfaceCard) {\r\n  return {\r\n    type: ADD_CARD,\r\n    card: {\r\n      id,\r\n      content\r\n    }\r\n  };\r\n}","export const REMOVE_CARD = 'REMOVE_CARD';\r\nexport function removeCard(id: string) {\r\n  return {\r\n    type: REMOVE_CARD,\r\n    id\r\n  };\r\n}","export const SET_TIMER_CARD = 'SET_TIMER_CARD';\r\nexport function setTimerCard(timerId: any){\r\n  return {\r\n    type: SET_TIMER_CARD,\r\n    timerFirstOpenCard: timerId\r\n  }\r\n}","export const SET_SCORE = 'SET_SCORE';\r\nexport function setScore(score: number) {\r\n  return {\r\n    type: SET_SCORE,\r\n    score\r\n  }\r\n}","export const START_GAME = \"START_GAME\";\r\nexport function startGame() {\r\n  return {\r\n    type: START_GAME\r\n  }\r\n}","export const STOP_GAME = \"STOP_GAME\";\r\nexport function stopGame() {\r\n  return {\r\n    type: STOP_GAME\r\n  }\r\n}","import React, { SyntheticEvent, useEffect, useState } from 'react';\nimport './App.sass';\nimport Button from './atoms/Button';\nimport InterfaceCard from './interfaces/interfaceCard';\nimport { shuffleCards, generateCard } from './cards';\nimport { addCard } from './store/actions/addCard';\nimport { removeCard } from './store/actions/removeCard';\nimport { setTimerCard } from './store/actions/setTimerCard';\nimport { setScore } from './store/actions/setScore';\nimport { startGame } from './store/actions/startGame';\nimport { stopGame } from './store/actions/stopGame';\n\nexport default function App({ store }: any) {\n  const [isStarted, setStarted] = useState(false);\n  const [timer, setTimer] = useState(120);\n  const [score, setscore] = useState(store.getState().score);\n\n  useEffect(() => {\n    if (timer === 0) {\n      alert(`Игра закончилась со счётом: ${score}`);\n      restart();\n      return;\n    }\n    if (score === 18) {\n      alert(`Поздравялем с победой!`);\n      restart();\n      return;\n    }\n    if (isStarted) {\n      setTimeout(() => {\n        setTimer(timer - 1);\n      }, 1000);\n    }\n  }, [timer, isStarted, score]);\n  const start = () => {\n    store.dispatch(startGame());\n    setStarted(true);\n  }\n  const pause = () => {\n    store.dispatch(stopGame());\n    setStarted(false);\n  }\n  const newScore = (num: number) => {\n    store.dispatch(setScore(num));\n    setscore(num);\n  }\n  const openCard = (id: string, content: string) => {\n    const card: InterfaceCard = { id, content, };\n    const openedCards: Array<InterfaceCard> = store.getState().openedCards;\n\n    store.dispatch(addCard(card));\n    document.querySelector(`.card[id=\"${id}\"]`)?.classList.add('card_opened');\n\n    if (openedCards.length === 2) {\n      clearTimeout(store.getState().timerFirstOpenCard);\n      if (openedCards[0].content === openedCards[1].content) {\n        newScore(store.getState().score + 1);\n        for (let i = 0; i < openedCards.length; i++) {\n          document.querySelector(`.card[id=\"${openedCards[i].id}\"]`)?.classList.add('card_deleted');\n        }\n        closeAllCards(openedCards);\n        return;\n      };\n      closeAllCards(openedCards, 500);\n      return;\n    } else if (openedCards.length === 1) {\n      const timerId = closeAllCards(openedCards, 5000);\n      store.dispatch(setTimerCard(timerId));\n    }\n    return;\n  }\n  const closeCard = (id: string) => {\n    document.querySelector(`.card[id=\"${id}\"]`)?.classList.remove('card_opened');\n    store.dispatch(removeCard(id));\n  }\n  const handlerClickCard = (event: SyntheticEvent) => {\n    let card = event.currentTarget;\n    if (isStarted) {\n      start();\n    }\n    if (card.classList.contains('card_deleted')) return;\n    if (card.classList.contains('card_opened')) {\n      closeCard(card.id);\n      card.classList.remove('card_opened');\n      return;\n    }\n    openCard(card.id, card.innerHTML);\n    card.classList.add('card_opened');\n  }\n\n  const closeAllCards = (openedCards: InterfaceCard[], timeClose: number = 0) => {\n    return setTimeout(() => {\n      for (let i = 0; i < openedCards.length; i++) {\n        closeCard(openedCards[i].id);\n      }\n    }, timeClose);\n  }\n  const restart = () => {\n    pause();\n    setTimeout(() => setTimer(120), 1000);\n    newScore(0);\n    clearTimeout(store.getState().timerFirstOpenCard);\n\n    document.querySelectorAll('.card_deleted').forEach((elem) => {\n      elem.classList.remove('card_deleted');\n    });\n    document.querySelectorAll('.card_opened').forEach((elem) => {\n      elem.classList.remove('card_opened');\n    });\n    setCards(shuffleCards(cards.slice()));\n  }\n  const [cards, setCards] = useState(generateCard(handlerClickCard));\n  return (\n    <>\n      <div className=\"panel\">\n        <Button onClick={start} disabled={isStarted}>Start</Button>\n        <Button onClick={pause} disabled={!isStarted}>Pause</Button>\n        <Button onClick={restart}>Restart</Button>\n      </div>\n      <div className=\"panel panel_non-padding\">\n        <h3>Time: {new Date(timer * 1000).getMinutes()}:{new Date(timer * 1000).getSeconds()}</h3>\n        <h3>Score: {score}</h3>\n      </div>\n      <div className=\"area\">\n        {cards}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\r\nimport letters from \"./Letters\";\r\nimport Card from \"./molecules/Card\";\r\n\r\nexport function generateCard(handlerClickCard: any) {\r\n  let cards: Array<any> = [];\r\n  letters.forEach((el, index) => {\r\n    for (let i = 0; i < 2; i++) {\r\n      const key = i + index * Math.random();\r\n      const card = <Card\r\n        id={key}\r\n        key={key}\r\n        onClick={handlerClickCard}\r\n      > {el} </Card>;\r\n      cards.push(card);\r\n    }\r\n  });\r\n  cards.sort(() => Math.random() - 0.5);\r\n  return cards;\r\n}\r\nexport function shuffleCards(cards: any) {\r\n  let newCards = cards.slice();\r\n  newCards.sort(() => Math.random() - 0.5);\r\n  return newCards;\r\n}","const initialState = {\r\n  openedCards: [],\r\n  deletedCards: [],\r\n  timerFirstOpenCard: '',\r\n  score: 0,\r\n  isStarted: false\r\n};\r\n\r\nexport default initialState;","import { createStore } from 'redux';\r\nimport initialState from './initialState';\r\nimport reducer from './reducer/reducer';\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;","import InterfaceCard from '../../interfaces/interfaceCard';\r\nimport { ADD_CARD } from '../actions/addCard';\r\nimport { REMOVE_CARD } from '../actions/removeCard';\r\nimport { SET_SCORE } from '../actions/setScore';\r\nimport { SET_TIMER_CARD } from '../actions/setTimerCard';\r\nimport { START_GAME } from '../actions/startGame';\r\nimport { STOP_GAME } from '../actions/stopGame';\r\n\r\nexport default function reducer(\r\n  state: any,\r\n  action: {\r\n    type: string;\r\n    card: InterfaceCard;\r\n    id: string;\r\n    timerFirstOpenCard: string;\r\n    score: number;\r\n  }\r\n) {\r\n  switch (action.type) {\r\n    case START_GAME: {\r\n      console.log('Started');\r\n      state.isStarted = true;\r\n      return state;\r\n    }\r\n    case STOP_GAME: {\r\n      console.log('Stoped');\r\n      state.isStarted = false;\r\n      return state;\r\n    }\r\n    case ADD_CARD: {\r\n      state.openedCards.push(action.card);\r\n      return state;\r\n    }\r\n    case REMOVE_CARD: {\r\n      state.openedCards = state.openedCards.filter(\r\n        (el: InterfaceCard) => (action.id !== el.id)\r\n      );\r\n      return state;\r\n    }\r\n    case SET_SCORE: {\r\n      state.score = action.score;\r\n      return state;\r\n    }\r\n    case SET_TIMER_CARD: {\r\n      state.timerFirstOpenCard = action.timerFirstOpenCard;\r\n    }\r\n  }\r\n  return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App store={store}/>\n  </Provider>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2M2rP\"};"],"sourceRoot":""}